//This is a magma script

p := 7;

field := GF(p);

b := 1;
b3 := 3*b;

//Curve polynomial
curve_poly<x> := Polynomial(field, [b, 0, 0, 1]);
curve_poly;

//Define Elliptic Curve
E<x, y, z> := EllipticCurve(curve_poly);
E;

#(field);
#(E);

//Get a points on the elliptic curve
Points(E);
X := E![0,1];
X;
Y := E![4,4];
Y;

cartesian := CartesianPower(E, 2);
cartesian;

//P[1] = X and P[2] = Y
P := cartesian! <X, Y>;
P[1];
P[2];

x_coord := map<field -> field | P:-> P[1][1]*P[2][2]+P[2][1]*P[1][2])*(P[1][2]*P[2][2]-3*b*P[1][3]*P[2][3])-3*b*(P[1][2]*P[2][3]+P[2][2]*P[1][3])*(P[1][1]*P[2][3]+P[2][1]*P[1][3])>;

// Define Addition law
add_law := map<cartesian -> E | P :-> E![(P[1][1]*P[2][2]+P[2][1]*P[1][2])*(P[1][2]*P[2][2]-3*b*P[1][3]*P[2][3])-3*b*(P[1][2]*P[2][3]+P[2][2]*P[1][3])*(P[1][1]*P[2][3]+P[2][1]*P[1][3]),(P[1][2]*P[2][2]+3*b*P[1][3]*P[2][3])*(P[1][2]*P[2][2]-3*b*P[1][3]*P[2][3])+9*b*P[1][1]*P[2][1]*(P[1][1]*P[2][3]+P[2][1]*P[1][3]),(P[1][2]*P[2][3]+P[2][2]*P[1][3])*(P[1][2]*P[2][2]+3*b*P[1][3]*P[2][3])+3*P[1][1]*P[2][1]*(P[1][1]*P[2][2]+P[2][1]*P[1][2])]>;

P @ add_law;

//--> (4:4:1)+(2:3:1)=(3:0:1)

//Point multiplication
pm := function(m, P)
   Out := P;
   S := [x : x in [1..m-1]];
   if not (P in E) then
	return false;
   end if; 
   for i in S do
     In := cartesian!<P, Out>;
     Out := In @ add_law;
   end for;

   return Out;
end function;

pm(4, Y);

x_coord := map<cartesian -> field | P:-> (P[1][1]*P[2][2]+P[2][1]*P[1][2])*(P[1][2]*P[2][2]-3*b*P[1][3]*P[2][3])-3*b*(P[1][2]*P[2][3]+P[2][2]*P[1][3])*(P[1][1]*P[2][3]+P[2][1]*P[1][3])>;
P @ x_coord;

y_coord := map<cartesian -> field | P:-> (P[1][2]*P[2][2]+3*b*P[1][3]*P[2][3])*(P[1][2]*P[2][2]-3*b*P[1][3]*P[2][3])+9*b*P[1][1]*P[2][1]*(P[1][1]*P[2][3]+P[2][1]*P[1][3])>;
P @ y_coord;

z_coord := map<cartesian -> field | P:-> (P[1][2]*P[2][3]+P[2][2]*P[1][3])*(P[1][2]*P[2][2]+3*b*P[1][3]*P[2][3])+3*P[1][1]*P[2][1]*(P[1][1]*P[2][2]+P[2][1]*P[1][2])>;
P @ z_coord;
