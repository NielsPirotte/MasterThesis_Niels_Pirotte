//This is a magma script
//secp256k1
n:= 780799; 


p := 2^256 - 2^32 - 2^9 - 2^8 - 2^7 - 2^6 - 2^4 - 1;
p;

field := GF(p);

b := 7;
b3 := 3*b;

//Curve polynomial
curve_poly<x> := Polynomial(field, [b, 0, 0, 1]);
curve_poly;

//Define Elliptic Curve
E<x, y, z> := EllipticCurve(curve_poly);
E;

#(field);
#(E);

//Get a points on the elliptic curve
//Points(E);
X := E![55066263022277343669578718895168534326250603453777594175500187360389116729240,32670510020758816978083085130507043184471273380659243275938904335757337482424,1];
printf "X = "; X;

cartesian := CartesianPower(E, 2);
cartesian;

// Define Addition law
add_law := map<cartesian -> E | P :-> E![(P[1][1]*P[2][2]+P[2][1]*P[1][2])*(P[1][2]*P[2][2]-3*b*P[1][3]*P[2][3])-3*b*(P[1][2]*P[2][3]+P[2][2]*P[1][3])*(P[1][1]*P[2][3]+P[2][1]*P[1][3]),(P[1][2]*P[2][2]+3*b*P[1][3]*P[2][3])*(P[1][2]*P[2][2]-3*b*P[1][3]*P[2][3])+9*b*P[1][1]*P[2][1]*(P[1][1]*P[2][3]+P[2][1]*P[1][3]),(P[1][2]*P[2][3]+P[2][2]*P[1][3])*(P[1][2]*P[2][2]+3*b*P[1][3]*P[2][3])+3*P[1][1]*P[2][1]*(P[1][1]*P[2][2]+P[2][1]*P[1][2])]>;

//Point multiplication

pmHelp := function(m, P, H)
     if m eq 1 then
     	 return H;
     end if;

     if not (P in E) then
	return false;
     end if;
     
     if not (H in E) then
	return false;
     end if; 

     In := cartesian!<P, H>;
     Out := In @ add_law;
     
     return $$(m-1, P, Out);
end function;

pm2 := function(m, P)
    return pmHelp(m,P,P);
end function;


printf "n = "; n;
res := pm2(n, X);
printf "nX = "; res;
